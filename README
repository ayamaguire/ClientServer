Client-Server Python Assignment, this time with python knowledge!

This is a client server application! It is written in Python 2.7, using Flask!
Beginning in a virtual environment or a clean Ubuntu 14.04 client, please run:
pip install -upgrade requirements.txt

(On mac I have to do: pip install -r requirements.txt)

Or if you feel like making things harder for yourself, you can manually install Flask, requirements,
and psutil.

Then, to start the server, run:
python FlaskServer.py

To start the clients, run:
python requester.py

You can manage various settings in the configuration json files.

Some info:
- The server is a simple Flask server. By default it launches on port 8000. If you change the setting
    in the server file, change it in the clients file too.
- The server uses threads and one process to manage stuff; the client uses processes.
- Everything is sent to the server via a request. Hearbeats, data, etc.
- Processes are monitored using psutil.


Things I didn't do, don't understand, or would make better with more time:
p.join() on my processes appeared to halt the running of the other processes. Not what I want at all.
Since they ended on their own, I didn't worry about it too much.

The server I am using is a Flask server with a few extra methods for handling shutdown and monitoring
whether there are still client connections. I think it's a little clunky, but it works.

I ran a stress test with 50 clients... it works but getting the clients up and going takes a while.
Then again, who wants to run 50 clients locally to write chunks of data...? :)

I tested this a lot manually by just running everything and breaking things into smaller pieces which
were testable. However, I am lacking official unit tests for many things. With more time, I would have
learned Mock/MagicMock -- but I didn't quite get there.

I got information using psutils, but I didn't break it out very much or make it more human readable.
I would have, but making the shutdown clean ended up taking priority.

The first time we open a new data file, we say we are "Rolling over a new data file". Not exactly
False, but not True either. Could be fixed.


Fun things to do:
Start the server, start the clients, then ctrl-c to kill the clients. Wait 120 seconds. :)